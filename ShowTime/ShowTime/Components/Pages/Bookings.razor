@page "/bookings"
@using ShowTime.BusinessLogic.Abstraction
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models
@using ShowTime.DataAccess.Models.Extras
@inject IBookingService BookingService
@inject IFestivalService FestivalService
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow-x: hidden;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .bookings-container {
        min-height: 100vh;
        width: 100%;
        padding: 20px;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .page-title {
        text-align: center;
        color: #0F4D0F;
        font-size: 2.5em;
        margin-bottom: 40px;
        text-shadow: 1px 1px 1px white;
    }

    .section {
        background: linear-gradient(135deg, black, white);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }

        .section h3 {
            color: #91C8E4;
            margin-bottom: 20px;
            font-weight: 600;
            text-shadow: 1px 1px 2px rgba(255,255,255,0.5);
        }

    .filter-section {
        display: flex;
        gap: 15px;
        align-items: center;
        margin-bottom: 25px;
        padding: 20px;
        background: rgba(255,255,255,0.1);
        border-radius: 10px;
        flex-wrap: wrap;
    }

    .filter-label {
        color: #91C8E4;
        font-weight: 600;
    }

    .form-control {
        background: rgba(255,255,255,0.1);
        border: 1px solid rgba(255,255,255,0.3);
        border-radius: 8px;
        padding: 8px 12px;
        color: white;
        font-size: 14px;
        min-width: 150px;
    }

        .form-control::placeholder {
            color: rgba(255,255,255,0.6);
        }

        .form-control:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 2px rgba(52,152,219,0.3);
        }

    .btn-custom {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 14px;
    }

        .btn-custom:hover {
            background: linear-gradient(135deg, #2980b9, #1abc9c);
            transform: translateY(-2px);
        }

    .bookings-table {
        width: 100%;
        background: rgba(255,255,255,0.1);
        backdrop-filter: blur(10px);
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }

        .bookings-table table {
            width: 100%;
            border-collapse: collapse;
        }

        .bookings-table th {
            background: rgba(0,0,0,0.3);
            color: #91C8E4;
            padding: 15px 10px;
            text-align: left;
            font-weight: 600;
            border-bottom: 1px solid rgba(255,255,255,0.2);
        }

        .bookings-table td {
            padding: 12px 10px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            color: white;
        }

        .bookings-table tr:hover {
            background: rgba(255,255,255,0.05);
        }

    .status-badge {
        padding: 4px 8px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
        text-transform: uppercase;
        display: inline-flex;
        align-items: center;
    }

    .status-done {
        background: rgba(39, 174, 96, 0.2);
        color: #27ae60;
        border: 1px solid #27ae60;
    }

    .status-pending {
        background: rgba(243, 156, 18, 0.2);
        color: #f39c12;
        border: 1px solid #f39c12;
    }

    .status-cancelled {
        background: rgba(231, 76, 60, 0.2);
        color: #e74c3c;
        border: 1px solid #e74c3c;
    }

    .empty-message {
        text-align: center;
        color: #91C8E4;
        font-size: 1.2em;
        padding: 40px;
        background: rgba(0,0,0,0.3);
        border-radius: 15px;
    }

    .loading {
        text-align: center;
        color: #91C8E4;
        font-size: 1.2em;
        padding: 40px;
        background: rgba(0,0,0,0.3);
        border-radius: 15px;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: linear-gradient(135deg, #34495e, #2c3e50);
        border-radius: 15px;
        padding: 20px;
        text-align: center;
        color: white;
        box-shadow: 0 8px 32px rgba(0,0,0,0.2);
        border: 1px solid rgba(255,255,255,0.1);
    }

    .stat-number {
        font-size: 2.5em;
        font-weight: bold;
        margin-bottom: 10px;
        color: #3498db;
    }

    .stat-label {
        font-size: 1em;
        opacity: 0.8;
    }

    .revenue-number {
        color: #9b59b6;
    }

    @@media (max-width: 768px) {
        .filter-section

    {
        flex-direction: column;
        align-items: stretch;
    }

    .bookings-table {
        font-size: 14px;
    }

        .bookings-table th,
        .bookings-table td {
            padding: 8px 5px;
        }

    }</style>

<div class="bookings-container">
    <AuthorizeView Roles="Admin">
        <Authorized>
            <h1 class="page-title">Bookings Management</h1>

            @if (isLoading)
            {
                <div class="loading">Loading bookings data...</div>
            }
            else
            {
                <!-- Statistics -->
                <div class="section">
                    <h3>📊 Booking Statistics</h3>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-number">@allBookings.Count</div>
                            <div class="stat-label">Total Bookings</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number revenue-number">$@totalRevenue.ToString("F2")</div>
                            <div class="stat-label">Total Revenue</div>
                        </div>
                    </div>
                </div>

                <!-- Filters -->
                <div class="section">
                    <div class="filter-section">
                        <span class="filter-label">Search:</span>
                        <input type="text" @bind="searchTerm" @bind:event="oninput"
                               placeholder="Customer name, email..." class="form-control" />

                        <span class="filter-label">Festival:</span>
                        <select @bind="festivalFilter" class="form-control">
                            <option value="">All Festivals</option>
                            @foreach (var festival in festivals)
                            {
                                <option value="@festival.Id">@festival.Name</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Bookings Table -->
                <div class="section">
                    <h3>📋 All Bookings (@GetFilteredBookings().Count)</h3>

                    @if (!GetFilteredBookings().Any())
                    {
                        <div class="empty-message">
                            No bookings found matching your criteria.
                        </div>
                    }
                    else
                    {
                        <div class="bookings-table">
                            <table>
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Customer</th>
                                        <th>Festival</th>
                                        <th>Ticket Type</th>
                                        <th>Qty</th>
                                        <th>Total</th>
                                        <th>Status</th>
                                        <th>Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var booking in GetFilteredBookings().OrderByDescending(b => b.Id))
                                    {
                                        <tr>
                                            <td><strong>#@booking.Id</strong></td>
                                            <td>
                                                <div>@booking.UserName</div>
                                                <div style="font-size: 0.8em; opacity: 0.7;">@booking.UserEmail</div>
                                            </td>
                                            <td>
                                                <div>@booking.FestivalName</div>
                                                <div style="font-size: 0.8em; opacity: 0.7;">@booking.FestivalDate.ToString("MMM dd, yyyy")</div>
                                            </td>
                                            <td>@booking.TicketType</td>
                                            <td>@booking.Quantity</td>
                                            <td><strong>$@booking.TotalAmount.ToString("F2")</strong></td>
                                            <td>
                                                <span class="status-badge status-@booking.BookingStatus.ToString().ToLower()">
                                                    @booking.BookingStatus
                                                </span>
                                            </td>
                                            <td>@booking.FestivalDate.ToString("MM/dd/yyyy")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div class="section">
                <p style="color: white; text-align: center;">You must be an admin to access this page.</p>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>


@code {
    private List<BookingGetDto> allBookings = new();
    private List<FestivalGetDto> festivals = new();
    private bool isLoading = true;
    private decimal totalRevenue = 0;

    private string searchTerm = string.Empty;
    private string festivalFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.IsInRole("Admin"))
        {
            Navigation.NavigateTo("/access-denied");
            return;
        }

        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        try
        {
            var bookingsTask = BookingService.GetAllBookingsAsync();
            var festivalsTask = FestivalService.GetAllFestivalsAsync();

            await Task.WhenAll(bookingsTask, festivalsTask);

            allBookings = (await bookingsTask).ToList();
            festivals = (await festivalsTask).ToList();

            CalculateStats();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private void CalculateStats()
    {
        totalRevenue = allBookings
            .Where(b => b.BookingStatus == Status.Done)
            .Sum(b => b.TotalAmount);
    }

    private List<BookingGetDto> GetFilteredBookings()
    {
        var filtered = allBookings.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower();
            filtered = filtered.Where(b =>
                b.UserName.ToLower().Contains(term) ||
                b.UserEmail.ToLower().Contains(term) ||
                b.FestivalName.ToLower().Contains(term) ||
                b.TicketType.ToLower().Contains(term));
        }

        if (!string.IsNullOrEmpty(festivalFilter) && int.TryParse(festivalFilter, out var festivalId))
        {
            var festival = festivals.FirstOrDefault(f => f.Id == festivalId);
            if (festival != null)
            {
                filtered = filtered.Where(b => b.FestivalName == festival.Name);
            }
        }

        return filtered.ToList();
    }
}