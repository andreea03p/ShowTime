@page "/Artists"
@using ShowTime.BusinessLogic.Abstraction
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models.Extras
@inject IArtistService ArtistService
@inject IFestivalService FestivalService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow-x: hidden;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .artists-container {
        min-height: 100vh;
        width: 100%;
        padding: 0;
        margin: 0;
        position: relative;
        background-attachment: fixed;
        background-repeat: no-repeat;
        background-size: cover;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .content-wrapper {
        padding: 40px 20px 20px 20px;
        width: 100%;
        height: 100%;
    }

    .form-section {
        color: antiquewhite;
        background: linear-gradient(135deg, rgba(0,0,0,0.8), rgba(255,255,255,0.1));
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }

        .form-section h3 {
            color: #91C8E4;
            margin-bottom: 20px;
            font-weight: 600;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: white;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 8px;
        background: rgba(255,255,255,0.8);
        transition: all 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: #3498db;
            background: rgba(255,255,255,0.95);
            box-shadow: 0 0 0 3px rgba(52,152,219,0.1);
        }

    .search-section {
        background: linear-gradient(135deg, rgba(0,0,0,0.8), rgba(255,255,255,0.1));
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }

    .search-input {
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
        display: block;
        padding: 12px 20px;
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 25px;
        background: rgba(255,255,255,0.9);
        font-size: 16px;
        transition: all 0.3s ease;
        text-align: center;
    }

        .search-input:focus {
            outline: none;
            border-color: #3498db;
            background: rgba(255,255,255,1);
            box-shadow: 0 0 20px rgba(52,152,219,0.3);
            transform: scale(1.02);
        }

        .search-input::placeholder {
            color: #666;
            font-style: italic;
        }

    .artists-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 25px;
        margin-top: 20px;
    }

    .artist-card {
        background: linear-gradient(135deg, rgba(0,0,0,0.8), rgba(6,64,43,0.8));
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 20px;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        border: 1px solid rgba(255,255,255,0.3);
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
        min-height: 400px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

        .artist-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #3498db, #1abc9c, #3498db);
            background-size: 200% 100%;
            animation: shimmer 2s infinite;
        }

        .artist-card:hover {
            transform: translateY(-10px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0,0,0,0.25);
        }

    .artist-image {
        width: 90%;
        height: 250px;
        object-fit: cover;
        border-radius: 15px;
        margin-bottom: 15px;
        margin: 10px auto 0; /* auto margins center horizontally */
        transition: all 0.3s ease;
    }

        .artist-image:hover {
            transform: scale(1.05);
        }

    .artist-name {
        font-size: 1.4em;
        font-weight: 600;
        color: white;
        margin-top: 10px;
        margin-bottom: 8px;
        text-shadow: 0 0 3px rgba(255, 255, 255, 0.5), 0 0 10px rgba(255, 255, 255, 0.6), 0 0 15px rgba(255, 255, 255, 0.7), 0 0 20px rgba(255, 255, 255, 0.8);
    }

    .artist-genre {
        color: #2c3e50;
        font-style: italic;
        font-size: 1.1em;
        padding: 5px 15px;
        background: rgba(255,255,255,0.8);
        border-radius: 20px;
        display: inline-block;
        margin-bottom: 15px;
        font-weight: 500;
    }

    .artist-festivals {
        flex: 1;
        margin-top: 15px;
        text-align: left;
    }

    .festivals-header {
        color: #91C8E4;
        font-size: 1.1em;
        font-weight: 600;
        margin-bottom: 10px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .festival-item {
        background: rgba(255,255,255,0.1);
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 8px;
        border-left: 3px solid #3498db;
        transition: all 0.3s ease;
    }

        .festival-item:hover {
            background: rgba(255,255,255,0.2);
            transform: translateX(5px);
        }

    .festival-name {
        color: white;
        font-weight: 600;
        font-size: 0.95em;
        margin-bottom: 4px;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .festival-details {
        display: flex;
        flex-direction: column;
        gap: 2px;
    }

    .festival-stage, .festival-time {
        color: #bdc3c7;
        font-size: 0.8em;
        display: flex;
        align-items: center;
        gap: 4px;
    }

        .festival-stage i, .festival-time i {
            color: #3498db;
            width: 12px;
        }

    .no-festivals {
        color: #7f8c8d;
        font-style: italic;
        text-align: center;
        padding: 10px;
        font-size: 0.9em;
    }

    .festival-count {
        background: #3498db;
        color: white;
        font-size: 0.7em;
        padding: 2px 6px;
        border-radius: 10px;
        font-weight: bold;
    }

    .loading-festivals {
        color: #7f8c8d;
        font-style: italic;
        text-align: center;
        padding: 10px;
        font-size: 0.9em;
    }

    .no-artists {
        text-align: center;
        color: #ecf0f1;
        font-size: 1.3em;
        background: rgba(0,0,0,0.3);
        padding: 40px;
        border-radius: 15px;
        backdrop-filter: blur(5px);
    }

    .page-title {
        text-align: center;
        color: #0F4D0F;
        font-size: 2.5em;
        margin-top: 0;
        margin-bottom: 40px;
        text-shadow: 1px 1px 1px white;
        position: relative;
        z-index: 10;
    }

    .forms-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .validation-message {
        color: #e74c3c;
        font-size: 0.875em;
        margin-top: 5px;
        display: block;
        font-weight: 500;
    }

    .form-control:invalid {
        border-color: #e74c3c;
        box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.1);
    }

    .form-control:valid:not(:placeholder-shown) {
        border-color: #27ae60;
        box-shadow: 0 0 0 3px rgba(39, 174, 96, 0.1);
    }

    .required::after {
        content: " *";
        color: #e74c3c;
        font-weight: bold;
    }

    /* Layered Button Styles */
    .add-artist-btn-container {
        position: relative;
        width: 40%;
        height: 56px;
        margin-bottom: 10px;
        margin-left: auto;
        margin-right: auto;
    }

    .add-artist-btn-stack {
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease;
        width: 100%;
        height: 100%;
        border: none;
        background: transparent;
        padding: 0;
        font-family: inherit;
    }

        .add-artist-btn-stack:hover:not(:disabled) {
            transform: translateY(-2px);
        }

        .add-artist-btn-stack:active:not(:disabled) {
            transform: translateY(0px);
        }

        .add-artist-btn-stack:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

    .add-artist-btn-layer {
        position: absolute;
        width: 100%;
        height: 48px;
        /* border-radius: 8px; */
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        font-size: 1rem;
        border: none;
        transition: all 0.2s ease;
        pointer-events: none;
    }

    .add-artist-layer-bottom {
        background: #1D3461;
        top: 6px;
        left: 6px;
        z-index: 1;
    }

    .add-artist-layer-middle {
        background: #64b5f6;
        top: 3px;
        left: 3px;
        z-index: 2;
    }

    .add-artist-layer-top {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        top: 0;
        left: 0;
        z-index: 3;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .add-artist-btn-stack:hover:not(:disabled) .add-artist-layer-top {
        transform: translate(-1px, -1px);
    }

    .add-artist-btn-stack:hover:not(:disabled) .add-artist-layer-middle {
        transform: translate(-1px, -1px);
    }

    .add-artist-btn-stack:active:not(:disabled) .add-artist-layer-top {
        transform: translate(2px, 2px);
    }

    .add-artist-btn-stack:active:not(:disabled) .add-artist-layer-middle {
        transform: translate(1px, 1px);
    }

    .add-artist-btn-stack:disabled .add-artist-layer-top {
        background: #6c757d;
        color: #adb5bd;
    }

    .add-artist-btn-stack:disabled .add-artist-layer-middle {
        background: #95a5a6;
    }

    .add-artist-btn-stack:disabled .add-artist-layer-bottom {
        background: #5a6268;
    }


    /* Layered Button Styles */
    .login-btn-container {
        position: relative;
        width: 50%;
        height: 56px;
        margin-left: auto;
        margin-right: auto;
    }

    .login-btn-stack {
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease;
        width: 100%;
        height: 100%;
        border: none;
        background: transparent;
        padding: 0;
    }

        .login-btn-stack:hover:not(:disabled) {
            transform: translateY(-2px);
        }

        .login-btn-stack:active:not(:disabled) {
            transform: translateY(0px);
        }

        .login-btn-stack:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

    .login-btn-layer {
        position: absolute;
        width: 100%;
        height: 48px;
        /* border-radius: 8px; */
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        font-size: 1rem;
        border: none;
        transition: all 0.2s ease;
        pointer-events: none;
    }

    .login-layer-bottom {
        background: #104F55;
        top: 6px;
        left: 6px;
        z-index: 1;
    }

    .login-layer-middle {
        background: #9EC5AB;
        top: 3px;
        left: 3px;
        z-index: 2;
    }

    .login-layer-top {
        background: #01200F;
        color: white;
        top: 0;
        left: 0;
        z-index: 3;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .login-btn-stack:hover:not(:disabled) .login-layer-top {
        transform: translate(-1px, -1px);
    }

    .login-btn-stack:hover:not(:disabled) .login-layer-middle {
        transform: translate(-1px, -1px);
    }

    .login-btn-stack:active:not(:disabled) .login-layer-top {
        transform: translate(2px, 2px);
    }

    .login-btn-stack:active:not(:disabled) .login-layer-middle {
        transform: translate(1px, 1px);
    }

    .login-btn-stack:disabled .login-layer-top {
        background: #6c757d;
        color: #adb5bd;
    }

    .login-btn-stack:disabled .login-layer-middle {
        background: #95a5a6;
    }

    .login-btn-stack:disabled .login-layer-bottom {
        background: #5a6268;
    }

    .search-results-info {
        color: #91C8E4;
        font-size: 0.9em;
        margin-bottom: 15px;
        text-align: center;
        font-style: italic;
    }

    @@keyframes shimmer {
        0% {
            background-position: 0% 50%;
        }

        50% {
            background-position: 100% 50%;
        }

        100% {
            background-position: 0% 50%;
        }
    }

    @@media (max-width: 768px) {
        .artists-grid {
            grid-template-columns: 1fr;
        }

        .artist-card {
            min-height: auto;
        }

        .festival-details {
            flex-direction: column;
        }

        .content-wrapper {
            padding: 20px 10px;
        }

        .search-input {
            max-width: 100%;
        }
    }
</style>

<div class="artists-container">
    <div class="content-wrapper">

        <AuthorizeView Roles="Admin">
            <Authorized Context="authContext">
                <div style="margin-top: auto; padding-top: 15px;">
                    <div class="add-artist-btn-container">
                        <button type="button" class="add-artist-btn-stack" @onclick="ManageArtists">
                            <div class="add-artist-btn-layer add-artist-layer-bottom"></div>
                            <div class="add-artist-btn-layer add-artist-layer-middle"></div>
                            <div class="add-artist-btn-layer add-artist-layer-top">
                                <span>Manage Artists</span>
                            </div>
                        </button>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>

        <!-- Search Section -->
        <div class="search-section">
            <input type="text"
                   class="search-input"
                   placeholder="Search artists by name or genre..."
                   @bind="searchTerm"
                   @oninput="OnSearchInput" />
        </div>

        <div class="form-section">
            <h3>Artists Gallery</h3>

            @if (!string.IsNullOrEmpty(searchTerm) && displayedArtists.Any())
            {
                <div class="search-results-info">
                    Found @displayedArtists.Count() artist@(displayedArtists.Count() == 1 ? "" : "s") matching "@searchTerm"
                </div>
            }
            else if (!string.IsNullOrEmpty(searchTerm) && !displayedArtists.Any())
            {
                <div class="search-results-info">
                    No artists found matching "@searchTerm"
                </div>
            }

            @if (displayedArtists.Count() == 0)
            {
                <div class="no-artists">
                    @if (string.IsNullOrEmpty(searchTerm))
                    {
                        <p>No artists so far.</p>
                    }
                    else
                    {
                        <p>No artists match your search criteria. Try searching for a different name or genre.</p>
                    }
                </div>
            }
            else
            {
                <div class="artists-grid">
                    @foreach (var artist in displayedArtists)
                    {
                        <div class="artist-card">
                            <img src="@artist.Image" alt="@artist.Name" class="artist-image" />
                            <div class="artist-name">@artist.Name</div>
                            <div class="artist-genre">@artist.Genre</div>

                            <div class="artist-festivals">
                                <div class="festivals-header">
                                    <i class="bi bi-calendar-event"></i>
                                    Festival Performances
                                    @if (artistFestivals?.ContainsKey(artist.Id) == true && artistFestivals[artist.Id]?.Any() == true)
                                    {
                                        <span class="festival-count">@artistFestivals[artist.Id].Count</span>
                                    }
                                </div>

                                @if (loadingFestivals?.Contains(artist.Id) == true)
                                {
                                    <div class="loading-festivals">
                                        <i class="bi bi-clock"></i> Loading performances...
                                    </div>
                                }
                                else if (artistFestivals?.ContainsKey(artist.Id) == true && artistFestivals[artist.Id]?.Any() == true)
                                {
                                    @foreach (var performance in artistFestivals[artist.Id].OrderBy(p => p.StartTime))
                                    {
                                        <div class="festival-item">
                                            <div class="festival-name">
                                                <i class="bi bi-music-note-beamed"></i>
                                                @performance.Festival?.Name
                                            </div>
                                            <div class="festival-details">
                                                <div class="festival-stage">
                                                    <i class="bi bi-geo-alt"></i>
                                                    <span>@performance.Stage</span>
                                                </div>
                                                <div class="festival-time">
                                                    <i class="bi bi-clock"></i>
                                                    <span>@performance.StartTime.ToString("MMM dd, yyyy - HH:mm")</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="no-festivals">
                                        <i class="bi bi-music-note"></i>
                                        <br />
                                        No scheduled performances so far.
                                    </div>
                                }
                            </div>

                            <AuthorizeView Roles="Admin">
                                <Authorized>
                                    <div style="margin-top: auto; padding-top: 15px;">
                                        <div class="login-btn-container">
                                            <button type="button" class="login-btn-stack" @onclick="() => PopupDeleteArtist(artist.Id)">
                                                <div class="login-btn-layer login-layer-bottom"></div>
                                                <div class="login-btn-layer login-layer-middle"></div>
                                                <div class="login-btn-layer login-layer-top">
                                                    <i class="bi bi-trash"></i>
                                                    <span>Delete Artist</span>
                                                </div>
                                            </button>
                                        </div>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    }
                </div>
            }
        </div>

    </div>
</div>

@code {
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();
    private Dictionary<int, List<LineupGetDto>> artistFestivals = new();
    private HashSet<int> loadingFestivals = new();
    [SupplyParameterFromForm]
    private ArtistCreateDto newArtist { get; set; } = new ArtistCreateDto();

    [SupplyParameterFromForm]
    private ArtistUpdateDto updatedArtist { get; set; } = new ArtistUpdateDto();

    private int selectedArtistId = 0;
    private EditForm? addArtistFormRef;
    private EditForm? updateArtistFormRef;

    public bool IsAddArtistFormValid => addArtistFormRef?.EditContext?.Validate() ?? false;
    public bool IsUpdateArtistFormValid => updateArtistFormRef?.EditContext?.Validate() ?? false;

    private string searchTerm = "";
    private IEnumerable<ArtistGetDto> displayedArtists => GetFilteredArtists();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            artists = await ArtistService.GetAllArtistsAsync();
            StateHasChanged();

            await LoadAllArtistFestivals();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing component: {ex.Message}");
        }
    }

    private IEnumerable<ArtistGetDto> GetFilteredArtists()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            return artists;
        }

        return artists.Where(a =>
            a.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            a.Genre.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        ).OrderBy(a => a.Name);
    }

    private async Task LoadAllArtistFestivals()
    {
        foreach (var artist in artists)
        {
            loadingFestivals.Add(artist.Id);
            StateHasChanged();

            try
            {
                var festivals = await ArtistService.GetAllFestivalsForArtistAsync(artist.Id);
                artistFestivals[artist.Id] = festivals.Cast<LineupGetDto>().ToList();
            }
            catch (Exception)
            {
                artistFestivals[artist.Id] = new List<LineupGetDto>();
            }
            finally
            {
                loadingFestivals.Remove(artist.Id);
                StateHasChanged();
            }
        }
    }

    private async Task AddArtist()
    {
        await ArtistService.AddArtistAsync(newArtist);
        newArtist = new ArtistCreateDto();
        artists = await ArtistService.GetAllArtistsAsync();
        await LoadAllArtistFestivals();
        StateHasChanged();
    }

    private async Task DeleteArtist(int id)
    {
        await ArtistService.DeleteArtistAsync(id);
        artists = await ArtistService.GetAllArtistsAsync();
        artistFestivals.Remove(id);
        StateHasChanged();
    }

    private async Task PopupDeleteArtist(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this artist?"))
        {
            await DeleteArtist(id);
        }
    }

    private void ManageArtists()
    {
        NavigationManager.NavigateTo("/artists-management");
    }

    private async Task OnArtistSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int artistId) && artistId > 0)
        {
            selectedArtistId = artistId;
            var selectedArtist = artists.FirstOrDefault(a => a.Id == artistId);

            if (selectedArtist != null)
            {
                updatedArtist.Name = selectedArtist.Name;
                updatedArtist.Genre = selectedArtist.Genre;
                updatedArtist.Image = selectedArtist.Image;
                StateHasChanged();
            }
        }
        else
        {
            selectedArtistId = 0;
            updatedArtist = new ArtistUpdateDto();
            StateHasChanged();
        }
    }

    private async Task UpdateArtist()
    {
        if (selectedArtistId > 0)
        {
            await ArtistService.UpdateArtistAsync(updatedArtist, selectedArtistId);
            updatedArtist = new ArtistUpdateDto();
            selectedArtistId = 0;
            artists = await ArtistService.GetAllArtistsAsync();
            await LoadAllArtistFestivals();
            StateHasChanged();
        }
    }

    private void OnArtistFieldChanged()
    {
        addArtistFormRef?.EditContext?.Validate();
        StateHasChanged();
    }

    private void OnUpdateArtistFieldChanged()
    {
        updateArtistFormRef?.EditContext?.Validate();
        StateHasChanged();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }
}