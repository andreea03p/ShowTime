@page "/cart"
@using ShowTime.BusinessLogic.Abstraction
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models
@using ShowTime.DataAccess.Models.Extras
@using System.Security.Claims
@inject IBookingService BookingService
@inject ITicketService TicketService
@inject IFestivalService FestivalService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@
@rendermode InteractiveServer

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow-x: hidden;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .cart-container {
        min-height: 100vh;
        width: 100%;
        padding: 20px;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .page-title {
        text-align: center;
        color: #0F4D0F;
        font-size: 2.5em;
        margin-bottom: 40px;
        text-shadow: 1px 1px 1px white;
    }

    .section {
        background: linear-gradient(135deg, black, white);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }

        .section h3 {
            color: #91C8E4;
            margin-bottom: 20px;
            font-weight: 600;
            text-shadow: 1px 1px 2px rgba(255,255,255,0.5);
        }

    .tabs {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        border-bottom: 2px solid rgba(255,255,255,0.2);
    }

    .tab-button {
        background: transparent;
        color: #91C8E4;
        border: none;
        padding: 10px 20px;
        font-size: 1.1em;
        font-weight: 600;
        cursor: pointer;
        border-bottom: 2px solid transparent;
        transition: all 0.3s ease;
    }

        .tab-button:hover {
            color: white;
        }

        .tab-button.active {
            color: white;
            border-bottom-color: #1abc9c;
        }

    .festivals-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 25px;
    }

    .festival-card {
        background: linear-gradient(50deg, black, #06402B);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        border: 1px solid rgba(255,255,255,0.3);
        transition: all 0.3s ease;
        color: white;
    }

    .festival-name {
        font-size: 1.4em;
        font-weight: 600;
        color: white;
        margin-bottom: 15px;
        text-align: center;
    }

    .ticket-item {
        background: rgba(255,255,255,0.1);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
        border: 1px solid rgba(255,255,255,0.2);
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
    }

    .ticket-info {
        display: flex;
        flex-direction: column;
        gap: 5px;
        flex: 1;
    }

    .ticket-type {
        font-weight: bold;
        color: #91C8E4;
        font-size: 1.1em;
    }

    .ticket-price {
        color: #1abc9c;
        font-weight: 600;
        font-size: 1.2em;
    }

    .ticket-availability {
        color: #ecf0f1;
        font-size: 0.9em;
    }

    .ticket-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        gap: 5px;
        background: rgba(255,255,255,0.1);
        border-radius: 5px;
        padding: 5px;
    }

    .quantity-btn {
        background: #3498db;
        color: white;
        border: none;
        width: 30px;
        height: 30px;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
        transition: background 0.3s ease;
    }

        .quantity-btn:hover {
            background: #2980b9;
        }

        .quantity-btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }

    .quantity-display {
        color: white;
        font-weight: bold;
        min-width: 30px;
        text-align: center;
    }

    .btn-custom {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-custom:hover {
            background: linear-gradient(135deg, #2980b9, #1abc9c);
            transform: translateY(-2px);
        }

        .btn-custom:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
            transform: none;
        }

    .btn-add {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
    }

    .btn-remove {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
    }

    .cart-summary {
        background: linear-gradient(135deg, #34495e, #2c3e50);
        border-radius: 15px;
        padding: 20px;
        margin-top: 20px;
        color: white;
        text-align: center;
    }

    .cart-total {
        font-size: 1.5em;
        font-weight: bold;
        color: #1abc9c;
        margin-bottom: 15px;
    }

    .cart-actions {
        display: flex;
        gap: 15px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn-checkout {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        padding: 12px 30px;
        font-size: 1.1em;
    }

    .btn-clear {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        padding: 12px 30px;
        font-size: 1.1em;
    }

    .booking-item {
        background: rgba(255,255,255,0.1);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
        border: 1px solid rgba(255,255,255,0.2);
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
    }

    .booking-info {
        display: flex;
        flex-direction: column;
        gap: 5px;
        flex: 1;
        color: white;
    }

    .booking-festival {
        font-weight: bold;
        color: #91C8E4;
        font-size: 1.2em;
    }

    .booking-ticket {
        color: #1abc9c;
        font-weight: 600;
    }

    .booking-details {
        color: #ecf0f1;
        font-size: 0.9em;
    }

    .booking-status {
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.85em;
        font-weight: 600;
        text-transform: uppercase;
    }

    .status-done {
        background: #27ae60;
        color: white;
    }

    .status-pending {
        background: #f39c12;
        color: white;
    }

    .status-cancelled {
        background: #e74c3c;
        color: white;
    }

    .empty-message {
        text-align: center;
        color: #ecf0f1;
        font-size: 1.3em;
        background: rgba(0,0,0,0.3);
        padding: 40px;
        border-radius: 15px;
    }

    .btn-manage {
        background: linear-gradient(135deg, #8e44ad, #9b59b6);
        border-radius: 8px;
        margin-bottom: 20px;
    }

        .btn-manage:hover {
            background: linear-gradient(135deg, #9b59b6, orange);
        }

    .loading {
        text-align: center;
        color: #91C8E4;
        font-size: 1.2em;
        padding: 20px;
    }
</style>

<div class="cart-container">
    <AuthorizeView Roles="Admin, User">
        <Authorized>
            <h1 class="page-title">Shopping Cart & My Tickets</h1>

            <AuthorizeView Roles="Admin">
                <Authorized Context="authContext">
                    <button type="button" class="btn-custom btn-manage" @onclick="SeeBookings">
                        See Bookings
                    </button>
                </Authorized>
            </AuthorizeView>


            @if (isLoading)
            {
                <div class="loading">Loading...</div>
            }
            else
            {
                <div class="section">
                    <div class="tabs">
                        <button class="tab-button @(activeTab == "cart" ? "active" : "")"
                                @onclick="@(() => SetActiveTab("cart"))">
                            Available Tickets
                        </button>
                        <button class="tab-button @(activeTab == "bookings" ? "active" : "")"
                                @onclick="@(() => SetActiveTab("bookings"))">
                            My Tickets (@userBookings.Count)
                        </button>
                    </div>

                    @if (activeTab == "cart")
                    {
                        <h3>Available Tickets</h3>

                        @if (!festivalsWithTickets.Any())
                        {
                            <div class="empty-message">
                                <p>No tickets available at the moment.</p>
                            </div>
                        }
                        else
                        {
                            <div class="festivals-grid">
                                @foreach (var festival in festivalsWithTickets)
                                {
                                    <div class="festival-card">
                                        <div class="festival-name">@festival.Festival.Name</div>

                                        @foreach (var ticket in festival.Tickets)
                                        {
                                            var cartItem = cartItems.FirstOrDefault(c => c.TicketId == ticket.Id);
                                            var quantityInCart = cartItem?.Quantity ?? 0;

                                            <div class="ticket-item">
                                                <div class="ticket-info">
                                                    <div class="ticket-type">@ticket.Type</div>
                                                    <div class="ticket-price">$@ticket.Price.ToString("F2")</div>
                                                    <div class="ticket-availability">
                                                        Available: @ticket.TicketsAvailable
                                                        @if (quantityInCart > 0)
                                                        {
                                                            <span style="color: #f39c12;"> (In Cart: @quantityInCart)</span>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="ticket-controls">
                                                    @if (quantityInCart > 0)
                                                    {
                                                        <div class="quantity-control">
                                                            <button class="quantity-btn" @onclick="() => DecreaseQuantity(ticket.Id)">-</button>
                                                            <span class="quantity-display">@quantityInCart</span>
                                                            <button class="quantity-btn"
                                                                    @onclick="() => IncreaseQuantity(ticket.Id)"
                                                                    disabled="@(quantityInCart >= ticket.TicketsAvailable)">
                                                                +
                                                            </button>
                                                        </div>
                                                        <button class="btn-custom btn-remove" @onclick="() => RemoveFromCart(ticket.Id)">
                                                            Remove
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn-custom btn-add"
                                                                @onclick="() => AddToCart(ticket.Id)"
                                                                disabled="@(ticket.TicketsAvailable <= 0 || !ticket.IsAvailable)">
                                                            @if (ticket.TicketsAvailable <= 0 || !ticket.IsAvailable)
                                                            {
                                                                <text>Sold Out</text>
                                                            }
                                                            else
                                                            {
                                                                <text>Add to Cart</text>
                                                            }
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            @if (cartItems.Any())
                            {
                                <div class="cart-summary">
                                    <div class="cart-total">
                                        Total: $@GetCartTotal().ToString("F2")
                                    </div>
                                    <div class="cart-actions">
                                        <button class="btn-custom btn-checkout" @onclick="CheckoutCart">
                                            Complete Purchase
                                        </button>
                                        <button class="btn-custom btn-clear" @onclick="ClearCart">
                                            Clear Cart
                                        </button>
                                    </div>
                                </div>
                            }
                        }
                    }
                    else if (activeTab == "bookings")
                    {
                        <h3>My Tickets</h3>

                        @if (!userBookings.Any())
                        {
                            <div class="empty-message">
                                <p>You haven't purchased any tickets yet.</p>
                                <p>Check out our available festivals!</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var booking in userBookings.OrderByDescending(b => b.Id))
                            {
                                <div class="booking-item">
                                    <div class="booking-info">
                                        <div class="booking-festival">@booking.FestivalName</div>
                                        <div class="booking-ticket">@booking.TicketType</div>
                                        <div class="booking-details">
                                            Quantity: @booking.Quantity | Total: $@booking.TotalAmount.ToString("F2")
                                        </div>
                                    </div>
                                    <div class="booking-status status-@booking.BookingStatus.ToString().ToLower()">
                                        @booking.BookingStatus
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div class="section">
                <p style="color: white; text-align: center;">Please log in to access the shopping cart.</p>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private List<FestivalWithTickets> festivalsWithTickets = new();
    private List<CartItem> cartItems = new();
    private List<BookingGetDto> userBookings = new();
    private bool isLoading = true;
    private int currentUserId = 0;
    private string activeTab = "cart";

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserInfo();
        if (currentUserId > 0)
        {
            await LoadData();
        }
        isLoading = false;
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private async Task GetCurrentUserInfo()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier) ??
                                 user.FindFirst("sub") ??
                                 user.FindFirst("userId") ??
                                 user.FindFirst("id");

                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
                {
                    currentUserId = userId;
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error getting user info: {ex.Message}");
        }
    }

    private async Task LoadData()
    {
        try
        {
            await LoadFestivalsAndTickets();
            await LoadUserBookings();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadFestivalsAndTickets()
    {
        var festivals = await FestivalService.GetAllFestivalsAsync();
        festivalsWithTickets.Clear();

        foreach (var festival in festivals)
        {
            var tickets = await TicketService.GetTicketByFestivalIdAsync(festival.Id);
            if (tickets.Any())
            {
                festivalsWithTickets.Add(new FestivalWithTickets
                {
                    Festival = festival,
                    Tickets = tickets.Where(t => t.IsAvailable).ToList()
                });
            }
        }
    }

    private async Task LoadUserBookings()
    {
        userBookings = (await BookingService.GetBookingsByUserIdAsync(currentUserId)).ToList();
    }

    private void AddToCart(int ticketId)
    {
        var ticket = festivalsWithTickets.SelectMany(f => f.Tickets).FirstOrDefault(t => t.Id == ticketId);
        if (ticket != null && ticket.TicketsAvailable > 0)
        {
            var existingItem = cartItems.FirstOrDefault(c => c.TicketId == ticketId);
            if (existingItem != null)
            {
                if (existingItem.Quantity < ticket.TicketsAvailable)
                {
                    existingItem.Quantity++;
                }
            }
            else
            {
                cartItems.Add(new CartItem { TicketId = ticketId, Quantity = 1 });
            }
            StateHasChanged();
        }
    }

    private void IncreaseQuantity(int ticketId)
    {
        var cartItem = cartItems.FirstOrDefault(c => c.TicketId == ticketId);
        var ticket = festivalsWithTickets.SelectMany(f => f.Tickets).FirstOrDefault(t => t.Id == ticketId);

        if (cartItem != null && ticket != null && cartItem.Quantity < ticket.TicketsAvailable)
        {
            cartItem.Quantity++;
            StateHasChanged();
        }
    }

    private void DecreaseQuantity(int ticketId)
    {
        var cartItem = cartItems.FirstOrDefault(c => c.TicketId == ticketId);
        if (cartItem != null)
        {
            cartItem.Quantity--;
            if (cartItem.Quantity <= 0)
            {
                cartItems.Remove(cartItem);
            }
            StateHasChanged();
        }
    }

    private void RemoveFromCart(int ticketId)
    {
        cartItems.RemoveAll(c => c.TicketId == ticketId);
        StateHasChanged();
    }

    private void ClearCart()
    {
        cartItems.Clear();
        StateHasChanged();
    }

    private decimal GetCartTotal()
    {
        decimal total = 0;
        foreach (var cartItem in cartItems)
        {
            var ticket = festivalsWithTickets
                .SelectMany(f => f.Tickets)
                .FirstOrDefault(t => t.Id == cartItem.TicketId);
            if (ticket != null)
            {
                total += ticket.Price * cartItem.Quantity;
            }
        }
        return total;
    }

    private async Task CheckoutCart()
    {
        if (!cartItems.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "Your cart is empty!");
            return;
        }

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Complete purchase for ${GetCartTotal():F2}?");

        if (!confirmed) return;

        try
        {
            foreach (var cartItem in cartItems)
            {
                var bookingDto = new BookingCreateDto
                {
                    TicketId = cartItem.TicketId,
                    UserId = currentUserId,
                    Quantity = cartItem.Quantity
                };

                await BookingService.CreateBookingAsync(bookingDto);
            }

            await JSRuntime.InvokeVoidAsync("alert", "Purchase completed successfully!");
            cartItems.Clear();
            await LoadData();
            activeTab = "bookings";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error completing purchase: {ex.Message}");
        }
    }

    @inject NavigationManager Navigation
    private void SeeBookings()
    {
        Navigation.NavigateTo("/bookings");
    }

    public class FestivalWithTickets
    {
        public FestivalGetDto Festival { get; set; } = new();
        public List<TicketGetDto> Tickets { get; set; } = new();
    }

    public class CartItem
    {
        public int TicketId { get; set; }
        public int Quantity { get; set; }
    }
}