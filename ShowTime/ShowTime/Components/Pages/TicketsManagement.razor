@page "/tickets-management"
@using ShowTime.BusinessLogic.Abstraction
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.BusinessLogic.Services
@using ShowTime.DataAccess.Models
@using ShowTime.DataAccess.Models.Enums
@inject ITicketService TicketService
@inject IFestivalService FestivalService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow-x: hidden;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .tickets-container {
        min-height: 100vh;
        width: 100%;
        padding: 0;
        margin: 0;
        position: relative;
        background-attachment: fixed;
        background-repeat: repeat;
        background-size: cover;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .content-wrapper {
        padding: 20px 20px 20px 20px;
        width: 100%;
        height: 100%;
    }

    .form-section {
        color: antiquewhite;
        background: linear-gradient(135deg, black, white);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }

        .form-section h3 {
            color: #91C8E4;
            margin-bottom: 20px;
            font-weight: 600;
            text-shadow: 1px 1px 2px rgba(255,255,255,0.5);
        }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: white;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 8px;
        background: rgba(255,255,255,0.8);
        transition: all 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: #3498db;
            background: rgba(255,255,255,0.95);
            box-shadow: 0 0 0 3px rgba(52,152,219,0.1);
        }

    .btn-custom {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(52,152,219,0.3);
        margin-right: 10px;
    }

        .btn-custom:hover {
            background: linear-gradient(135deg, #2980b9, #1abc9c);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(52,152,219,0.4);
        }

        .btn-custom:disabled {
            background: linear-gradient(135deg, #bdc3c7, #95a5a6);
            cursor: not-allowed;
            transform: none;
        }

    .btn-delete {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        border-radius: 12px;
    }

        .btn-delete:hover {
            background: linear-gradient(135deg, #c0392b, #e74c3c);
        }

    .page-title {
        text-align: center;
        color: #0F4D0F;
        font-size: 2.5em;
        margin-top: 0;
        margin-bottom: 40px;
        text-shadow: 1px 1px 1px white;
        position: relative;
        z-index: 10;
    }

    .forms-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .tickets-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 25px;
        margin-top: 20px;
    }

    .ticket-card {
        background: linear-gradient(50deg, black, #06402B);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        border: 1px solid rgba(255,255,255,0.3);
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 15px;
        min-height: 300px;
    }

        .ticket-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #3498db, #1abc9c, #3498db);
            background-size: 200% 100%;
            animation: shimmer 2s infinite;
        }

        .ticket-card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0,0,0,0.25);
        }

    .ticket-type {
        font-size: 1.4em;
        font-weight: 600;
        color: #91C8E4;
        margin-bottom: 8px;
        text-align: center;
    }

    .ticket-price {
        font-size: 1.8em;
        font-weight: bold;
        color: #1abc9c;
        text-align: center;
        margin-bottom: 10px;
    }

    .ticket-details {
        color: white;
        display: flex;
        flex-direction: column;
        gap: 8px;
        flex-grow: 1;
    }

    .ticket-detail-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 5px 0;
        border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .ticket-actions {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 15px;
        flex-wrap: wrap;
    }

    .no-tickets {
        text-align: center;
        color: #ecf0f1;
        font-size: 1.3em;
        background: rgba(0,0,0,0.3);
        padding: 40px;
        border-radius: 15px;
        backdrop-filter: blur(5px);
    }

    .validation-message {
        color: red;
        font-size: 0.875em;
        margin-top: 5px;
        display: block;
        font-weight: 500;
    }

    .required::after {
        content: " *";
        color: red;
        font-weight: bold;
    }

    .availability-badge {
        padding: 4px 8px;
        border-radius: 10px;
        font-size: 0.8em;
        font-weight: bold;
        text-transform: uppercase;
    }

    .available {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
    }

    .unavailable {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
    }

    .error-message {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-weight: 500;
    }

    .success-message {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-weight: 500;
    }

    @@keyframes shimmer {
        0% {
            background-position: -200% 0;
        }

        100% {
            background-position: 200% 0;
        }
    }
</style>

<div class="tickets-container">
    <div class="content-wrapper">
        <AuthorizeView Roles="Admin">
            <Authorized Context="authContext">
                <h1 class="page-title">Tickets Management</h1>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">@errorMessage</div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="success-message">@successMessage</div>
                }

                <div class="forms-container">
                    <!-- Add New Ticket Form -->
                    <div class="form-section">
                        <h3>Add New Ticket</h3>
                        <EditForm Model="newTicket" OnValidSubmit="AddTicket" OnInvalidSubmit="OnAddFormInvalidSubmit">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label class="required">Festival</label>
                                <InputSelect @bind-Value="newTicket.FestivalId" class="form-control">
                                    <option value="0">-- Select Festival --</option>
                                    @foreach (var festival in festivals)
                                    {
                                        <option value="@festival.Id">@festival.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newTicket.FestivalId)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label class="required">Ticket Type</label>
                                <InputSelect @bind-Value="newTicket.Type" class="form-control">
                                    <option value="">-- Select Ticket Type --</option>
                                    @foreach (var ticketType in Enum.GetValues(typeof(TicketType)).Cast<TicketType>())
                                    {
                                        <option value="@ticketType">@ticketType.ToString()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newTicket.Type)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label class="required">Price</label>
                                <InputNumber @bind-Value="newTicket.Price"
                                             class="form-control"
                                             placeholder="e.g., 99.99"
                                             step="0.01" />
                                <ValidationMessage For="@(() => newTicket.Price)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label class="required">Quantity Available</label>
                                <InputNumber @bind-Value="newTicket.Quantity"
                                             class="form-control"
                                             placeholder="e.g., 500" />
                                <ValidationMessage For="@(() => newTicket.Quantity)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label>
                                    <InputCheckbox @bind-Value="newTicket.IsAvailable" />
                                    Available for Sale
                                </label>
                            </div>

                            <button type="submit" class="btn-custom" disabled="@isAddingTicket">
                                @if (isAddingTicket)
                                {
                                    <span>Adding...</span>
                                }
                                else
                                {
                                    <span>Add Ticket</span>
                                }
                            </button>
                        </EditForm>
                    </div>

                    <!-- Update Ticket Form -->
                    <div class="form-section">
                        <h3>Update Ticket</h3>
                        <p>Select ticket to update from existing tickets below</p>

                        <select class="form-control" @onchange="OnTicketSelected" style="margin-bottom: 20px;">
                            <option value="">-- Select a Ticket --</option>
                            @foreach (var ticket in tickets)
                            {
                                <option value="@ticket.Id">@GetFestivalName(ticket.FestivalId) - @ticket.Type ($@ticket.Price)</option>
                            }
                        </select>

                        <EditForm Model="updatedTicket" OnValidSubmit="UpdateTicket" OnInvalidSubmit="OnUpdateFormInvalidSubmit">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label class="required">Festival</label>
                                <InputSelect @bind-Value="updatedTicket.FestivalId" class="form-control">
                                    <option value="0">-- Select Festival --</option>
                                    @foreach (var festival in festivals)
                                    {
                                        <option value="@festival.Id">@festival.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => updatedTicket.FestivalId)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label class="required">Ticket Type</label>
                                <InputSelect @bind-Value="updatedTicket.Type" class="form-control">
                                    <option value="">-- Select Ticket Type --</option>
                                    @foreach (var ticketType in Enum.GetValues(typeof(TicketType)).Cast<TicketType>())
                                    {
                                        <option value="@ticketType">@ticketType.ToString()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => updatedTicket.Type)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label class="required">Price</label>
                                <InputNumber @bind-Value="updatedTicket.Price"
                                             class="form-control"
                                             step="0.01" />
                                <ValidationMessage For="@(() => updatedTicket.Price)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label class="required">Quantity Available</label>
                                <InputNumber @bind-Value="updatedTicket.Quantity"
                                             class="form-control" />
                                <ValidationMessage For="@(() => updatedTicket.Quantity)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label>
                                    <InputCheckbox @bind-Value="updatedTicket.IsAvailable" />
                                    Available for Sale
                                </label>
                            </div>

                            <button type="submit" class="btn-custom" disabled="@(selectedTicketId == 0 || isUpdatingTicket)">
                                @if (isUpdatingTicket)
                                {
                                    <span>Updating...</span>
                                }
                                else
                                {
                                    <span>Update Ticket</span>
                                }
                            </button>
                        </EditForm>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>

        <!-- Display All Tickets -->
        <div class="form-section">
            <h3>All Tickets</h3>
            @if (!tickets.Any())
            {
                <div class="no-tickets">
                    <p>No tickets created yet.</p>
                    <p>Create tickets for your festivals above!</p>
                </div>
            }
            else
            {
                <div class="tickets-grid">
                    @foreach (var ticket in tickets)
                    {
                        <div class="ticket-card">
                            <div class="ticket-type">@ticket.Type</div>
                            <div class="ticket-price">$@ticket.Price.ToString("F2")</div>

                            <div class="ticket-details">
                                <div class="ticket-detail-item">
                                    <span>Festival:</span>
                                    <span>@GetFestivalName(ticket.FestivalId)</span>
                                </div>
                                <div class="ticket-detail-item">
                                    <span>Quantity:</span>
                                    <span>@ticket.TicketsTotal</span>
                                </div>
                                <div class="ticket-detail-item">
                                    <span>Available:</span>
                                    <span>@ticket.TicketsAvailable</span>
                                </div>
                                <div class="ticket-detail-item">
                                    <span>Status:</span>
                                    <span class="availability-badge @(ticket.IsAvailable ? "available" : "unavailable")">
                                        @(ticket.IsAvailable ? "Available" : "Unavailable")
                                    </span>
                                </div>
                                <div class="ticket-detail-item">
                                    <span>Ticket ID:</span>
                                    <span>#@ticket.Id</span>
                                </div>
                            </div>

                            <AuthorizeView Roles="Admin">
                                <Authorized>
                                    <div class="ticket-actions">
                                        <button type="button" class="btn-custom btn-delete" @onclick="() => DeleteTicket(ticket.Id)">
                                            Delete Ticket
                                        </button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<TicketGetDto> tickets = new();
    private List<FestivalGetDto> festivals = new();

    private TicketCreateDto newTicket = new();
    private TicketUpdateDto updatedTicket = new();

    private int selectedTicketId = 0;
    private bool isAddingTicket = false;
    private bool isUpdatingTicket = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    @inject AuthenticationStateProvider AuthenticationStateProvider;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.IsInRole("Admin"))
        {
            Navigation.NavigateTo("/access-denied");
        }
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            tickets = (await TicketService.GetAllTicketsAsync()).ToList();
            festivals = (await FestivalService.GetAllFestivalsAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private async Task AddTicket()
    {
        try
        {
            ClearMessages();

            if (newTicket.FestivalId <= 0)
            {
                errorMessage = "Please select a festival.";
                return;
            }

            if (!newTicket.Type.HasValue)
            {
                errorMessage = "Please select a ticket type.";
                return;
            }

            if (newTicket.Price <= 0)
            {
                errorMessage = "Please enter a valid price greater than 0.";
                return;
            }

            if (newTicket.Quantity <= 0)
            {
                errorMessage = "Please enter a valid quantity greater than 0.";
                return;
            }

            isAddingTicket = true;

            await TicketService.AddTicketAsync(newTicket);

            successMessage = "Ticket added successfully!";

            newTicket = new TicketCreateDto();

            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding ticket: {ex.Message}";
        }
        finally
        {
            isAddingTicket = false;
            StateHasChanged();
        }
    }

    private async Task UpdateTicket()
    {
        try
        {
            ClearMessages();

            if (updatedTicket.FestivalId <= 0)
            {
                errorMessage = "Please select a festival.";
                return;
            }

            if (!updatedTicket.Type.HasValue)
            {
                errorMessage = "Please select a ticket type.";
                return;
            }

            if (updatedTicket.Price <= 0)
            {
                errorMessage = "Please enter a valid price greater than 0.";
                return;
            }

            if (updatedTicket.Quantity <= 0)
            {
                errorMessage = "Please enter a valid quantity greater than 0.";
                return;
            }

            isUpdatingTicket = true;

            await TicketService.UpdateTicketAsync(updatedTicket, selectedTicketId);

            successMessage = "Ticket updated successfully!";

            updatedTicket = new TicketUpdateDto();
            selectedTicketId = 0;

            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating ticket: {ex.Message}";
        }
        finally
        {
            isUpdatingTicket = false;
            StateHasChanged();
        }
    }

    private async Task DeleteTicket(int ticketId)
    {
        try
        {
            ClearMessages();

            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                "Are you sure you want to delete this ticket? This action cannot be undone.");

            if (!confirmed)
                return;

            await TicketService.DeleteTicketAsync(ticketId);

            successMessage = "Ticket deleted successfully!";

            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting ticket: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task OnTicketSelected(ChangeEventArgs e)
    {
        try
        {
            ClearMessages();

            if (int.TryParse(e.Value?.ToString(), out int ticketId) && ticketId > 0)
            {
                selectedTicketId = ticketId;

                var ticket = await TicketService.GetTicketByIdAsync(ticketId);

                updatedTicket = new TicketUpdateDto
                {
                    FestivalId = ticket.FestivalId,
                    Type = ticket.Type,
                    Price = ticket.Price,
                    Quantity = ticket.TicketsTotal,
                    IsAvailable = ticket.IsAvailable
                };
            }
            else
            {
                selectedTicketId = 0;
                updatedTicket = new TicketUpdateDto();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading ticket details: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnAddFormInvalidSubmit()
    {
        errorMessage = "Please correct the validation errors and try again.";
        StateHasChanged();
    }

    private void OnUpdateFormInvalidSubmit()
    {
        errorMessage = "Please correct the validation errors and try again.";
        StateHasChanged();
    }

    private string GetFestivalName(int festivalId)
    {
        var festival = festivals.FirstOrDefault(f => f.Id == festivalId);
        return festival?.Name ?? "Unknown Festival";
    }

    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }
}