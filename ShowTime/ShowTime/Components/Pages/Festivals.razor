@page "/Festivals"
@using ShowTime.BusinessLogic.Abstraction
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models
@inject IFestivalService FestivalService
@inject IArtistService ArtistService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow-x: hidden;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .festivals-container {
        min-height: 100vh;
        width: 100%;
        padding: 0;
        margin: 0;
        position: relative;
        background-attachment: fixed;
        background-repeat: repeat;
        background-size: cover;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .content-wrapper {
        padding: 20px 20px 20px 20px;
        width: 100%;
        height: 100%;
    }

    .form-section {
        color: antiquewhite;
        background: linear-gradient(135deg, rgba(0,0,0,0.8), rgba(255,255,255,0.1));
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }

        .form-section h3 {
            color: #91C8E4;
            margin-bottom: 20px;
            font-weight: 600;
            text-shadow: 1px 1px 2px rgba(255,255,255,0.5);
        }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: white;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 8px;
        background: rgba(255,255,255,0.8);
        transition: all 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: #3498db;
            background: rgba(255,255,255,0.95);
            box-shadow: 0 0 0 3px rgba(52,152,219,0.1);
        }


    .festivals-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 25px;
        margin-top: 20px;
    }

    .festival-card {
        background: linear-gradient(50deg, black, #06402B);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        border: 1px solid rgba(255,255,255,0.3);
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
        min-height: 350px;
        text-align: center;
    }

        .festival-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #3498db, #1abc9c, #3498db);
            background-size: 200% 100%;
            animation: shimmer 2s infinite;
        }

        .festival-card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0,0,0,0.25);
        }

    .fest-image {
        width: 250px;
        height: 160px;
        object-fit: cover;
        border-radius: 15px;
        flex-shrink: 0;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }

        .fest-image:hover {
            transform: scale(1.05);
        }

    .festival-name {
        font-size: 1.4em;
        font-weight: 600;
        color: white;
        margin-bottom: 8px;
    }

    .no-festivals {
        text-align: center;
        color: #ecf0f1;
        font-size: 1.3em;
        background: rgba(0,0,0,0.3);
        padding: 40px;
        border-radius: 15px;
        backdrop-filter: blur(5px);
    }

    .page-title {
        text-align: center;
        color: #0F4D0F;
        font-size: 2.5em;
        margin-top: 0;
        margin-bottom: 40px;
        text-shadow: 1px 1px 1px white;
        position: relative;
        z-index: 10;
    }

    .forms-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .fest-name {
        font-style: italic;
        font-weight: bold;
        font-size: 1.8em;
        text-shadow: 1px 1px 2px rgba(0,255,0,0.5);
    }

    .validation-message {
        color: red;
        font-size: 0.875em;
        margin-top: 5px;
        display: block;
        font-weight: 500;
    }

    .form-control:invalid {
        border-color: red;
        box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.1);
    }

    .form-control:valid:not(:placeholder-shown) {
        border-color: darkgreen;
        box-shadow: 0 0 0 3px rgba(39, 174, 96, 0.1);
    }

    .required::after {
        content: " *";
        color: red;
        font-weight: bold;
    }

    .lineup-section {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 2px solid rgba(255,255,255,0.2);
    }

     /* Layered Button Styles */
    .add-artist-btn-container {
        position: relative;
        width: 40%;
        height: 56px;
        margin-bottom: 10px;
        margin-left: auto;
        margin-right: auto;
    }

    .add-artist-btn-stack {
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease;
        width: 100%;
        height: 100%;
        border: none;
        background: transparent;
        padding: 0;
        font-family: inherit;
    }

        .add-artist-btn-stack:hover:not(:disabled) {
            transform: translateY(-2px);
        }

        .add-artist-btn-stack:active:not(:disabled) {
            transform: translateY(0px);
        }

        .add-artist-btn-stack:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

    .add-artist-btn-layer {
        position: absolute;
        width: 100%;
        height: 48px;
        /* border-radius: 8px; */
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        font-size: 1rem;
        border: none;
        transition: all 0.2s ease;
        pointer-events: none;
    }

    .add-artist-layer-bottom {
        background: #1D3461;
        top: 6px;
        left: 6px;
        z-index: 1;
    }

    .add-artist-layer-middle {
        background: #64b5f6;
        top: 3px;
        left: 3px;
        z-index: 2;
    }

    .add-artist-layer-top {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        top: 0;
        left: 0;
        z-index: 3;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .add-artist-btn-stack:hover:not(:disabled) .add-artist-layer-top {
        transform: translate(-1px, -1px);
    }

    .add-artist-btn-stack:hover:not(:disabled) .add-artist-layer-middle {
        transform: translate(-1px, -1px);
    }

    .add-artist-btn-stack:active:not(:disabled) .add-artist-layer-top {
        transform: translate(2px, 2px);
    }

    .add-artist-btn-stack:active:not(:disabled) .add-artist-layer-middle {
        transform: translate(1px, 1px);
    }

    .add-artist-btn-stack:disabled .add-artist-layer-top {
        background: #6c757d;
        color: #adb5bd;
    }

    .add-artist-btn-stack:disabled .add-artist-layer-middle {
        background: #95a5a6;
    }

    .add-artist-btn-stack:disabled .add-artist-layer-bottom {
        background: #5a6268;
    }


    /* Layered Button Styles */
    .login-btn-container {
        position: relative;
        width: 100%;
        height: 56px;
    }

    .button-group {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 15px;
        width: 100%;
    }

    .button-group > div {
        flex: 1;
        max-width: 150px; /* Limit button width for better appearance */
    }

    .login-btn-stack {
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease;
        width: 100%;
        height: 100%;
        border: none;
        background: transparent;
        padding: 0;
    }

        .login-btn-stack:hover:not(:disabled) {
            transform: translateY(-2px);
        }

        .login-btn-stack:active:not(:disabled) {
            transform: translateY(0px);
        }

        .login-btn-stack:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

    .login-btn-layer {
        position: absolute;
        width: 100%;
        height: 48px;
        /* border-radius: 8px; */
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        font-size: 1rem;
        border: none;
        transition: all 0.2s ease;
        pointer-events: none;
    }

    .login-layer-bottom {
        background: #104F55;
        top: 6px;
        left: 6px;
        z-index: 1;
    }

    .login-layer-middle {
        background: #9EC5AB;
        top: 3px;
        left: 3px;
        z-index: 2;
    }

    .login-layer-top {
        background: #01200F;
        color: white;
        top: 0;
        left: 0;
        z-index: 3;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .login-layer-top1 {
        background: linear-gradient(135deg, #104F55, #1E3F20);
        color: white;
        top: 0;
        left: 0;
        z-index: 3;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .login-btn-stack:hover:not(:disabled) .login-layer-top {
        transform: translate(-1px, -1px);
    }

    .login-btn-stack:hover:not(:disabled) .login-layer-top1 {
        transform: translate(-1px, -1px);
    }

    .login-btn-stack:hover:not(:disabled) .login-layer-middle {
        transform: translate(-1px, -1px);
    }

    .login-btn-stack:active:not(:disabled) .login-layer-top {
        transform: translate(2px, 2px);
    }

    .login-btn-stack:active:not(:disabled) .login-layer-top1 {
        transform: translate(2px, 2px);
    }

    .login-btn-stack:active:not(:disabled) .login-layer-middle {
        transform: translate(1px, 1px);
    }

    .login-btn-stack:disabled .login-layer-top {
        background: #6c757d;
        color: #adb5bd;
    }

    .login-btn-stack:disabled .login-layer-top1 {
        background: #6c757d;
        color: #adb5bd;
    }

    .login-btn-stack:disabled .login-layer-middle {
        background: #95a5a6;
    }

    .login-btn-stack:disabled .login-layer-bottom {
        background: #5a6268;
    }

        .search-section {
        background: linear-gradient(135deg, rgba(0,0,0,0.8), rgba(255,255,255,0.1));
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }

    .search-input {
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
        display: block;
        padding: 12px 20px;
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 25px;
        background: rgba(255,255,255,0.9);
        font-size: 16px;
        transition: all 0.3s ease;
        text-align: center;
    }

        .search-input:focus {
            outline: none;
            border-color: #3498db;
            background: rgba(255,255,255,1);
            box-shadow: 0 0 20px rgba(52,152,219,0.3);
            transform: scale(1.02);
        }

        .search-input::placeholder {
            color: #666;
            font-style: italic;
        }


    @@keyframes shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }
</style>

<div class="festivals-container">
    <div class="content-wrapper">

         <AuthorizeView Roles="Admin">
            <Authorized Context="authContext">
                <div style="margin-top: auto; padding-top: 15px;">
                    <div class="add-artist-btn-container">
                        <button type="button" class="add-artist-btn-stack" @onclick="ManageFestivals">
                            <div class="add-artist-btn-layer add-artist-layer-bottom"></div>
                            <div class="add-artist-btn-layer add-artist-layer-middle"></div>
                            <div class="add-artist-btn-layer add-artist-layer-top">
                                <span>Manage Festivals</span>
                            </div>
                        </button>
                    </div>
                </div>
                <div style="margin-top: auto; padding-top: 15px;">
                    <div class="add-artist-btn-container">
                        <button type="button" class="add-artist-btn-stack" onclick="window.location.href='tickets-management'">
                            <div class="add-artist-btn-layer add-artist-layer-bottom"></div>
                            <div class="add-artist-btn-layer add-artist-layer-middle"></div>
                            <div class="add-artist-btn-layer add-artist-layer-top">
                                <i class="bi bi-ticket-detailed-fill"></i>
                                <span>Tickets</span>
                            </div>
                        </button>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>

        <!-- Search Section -->
        <div class="search-section">
            <input type="text"
                   class="search-input"
                   placeholder="Search festivals by name..."
                   @bind="searchTerm"
                   @oninput="OnSearchInput" />
        </div>

        <div class="form-section">
            <h3>Festivals</h3>
            @if (festivals.Count == 0)
            {
                <div class="no-festivals">
                    <p>No festivals so far.</p>
                </div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(searchTerm) && displayedFestivals.Any())
                {
                    <div class="search-results-info">
                        Found @displayedFestivals.Count() festival@(displayedFestivals.Count() == 1 ? "" : "s") matching "@searchTerm"
                    </div>
                }
                else if (!string.IsNullOrEmpty(searchTerm) && !displayedFestivals.Any())
                {
                    <div class="search-results-info">
                        No festivals found matching "@searchTerm"
                    </div>
                }

                @if (displayedFestivals.Count() == 0)
                {
                    <div class="no-festivals">
                        @if (string.IsNullOrEmpty(searchTerm))
                        {
                            <p>No festivals so far.</p>
                        }
                        else
                        {
                            <p>No festivals match your search criteria. Try searching for a different name.</p>
                        }
                    </div>
                }

                <div class="festivals-grid">
                    @foreach (var fest in displayedFestivals)
                    {
                        <div class="festival-card">
                            <img src="@fest.SplashArt" alt="@fest.Name" class="fest-image" />
                            <div class="fest-name">@fest.Name</div>
                            <div class="fest-start">
                                <i class="bi bi-calendar"></i>
                                @fest.StartDate.ToString("dd-MM-yyyy") - @fest.EndDate.ToString("dd-MM-yyyy")
                            </div>
                            <div class="fest-location">
                                <i class="bi bi-geo"></i>
                                @fest.Address
                            </div>
                            @* <div class="fest-price">
                                <i class="bi bi-currency-exchange"></i>
                                from $
                            </div> *@

                            <div class="button-group">
                                <div>
                                    <div class="login-btn-container">
                                        <button type="button" class="login-btn-stack" @onclick="() => ViewFestivalDetails(fest.Id)">
                                            <div class="login-btn-layer login-layer-bottom"></div>
                                            <div class="login-btn-layer login-layer-middle"></div>
                                            <div class="login-btn-layer login-layer-top1">
                                                <i class="bi bi-eye"></i>
                                                <span>View Details</span>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                                <AuthorizeView Roles="Admin">
                                    <Authorized>
                                        <div>
                                            <div class="login-btn-container">
                                                <button type="button" class="login-btn-stack" @onclick="() => PopupDeleteFestival(fest.Id)">
                                                    <div class="login-btn-layer login-layer-bottom"></div>
                                                    <div class="login-btn-layer login-layer-middle"></div>
                                                    <div class="login-btn-layer login-layer-top">
                                                        <i class="bi bi-trash"></i>
                                                        <span>Delete Festival</span>
                                                    </div>
                                                </button>
                                            </div>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IList<FestivalGetDto> festivals = new List<FestivalGetDto>();
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();

    [SupplyParameterFromForm]
    private FestivalCreateDto newFestival { get; set; } = new FestivalCreateDto();

    [SupplyParameterFromForm]
    private FestivalUpdateDto updatedFestival { get; set; } = new FestivalUpdateDto();

    [SupplyParameterFromForm]
    private LineupCreateDto newLineup { get; set; } = new LineupCreateDto();

    private int selectedFestivalId = 0;
    private EditForm? addFormRef;
    private EditForm? updateFormRef;
    private EditForm? lineupFormRef;

    public bool IsAddFormValid => addFormRef?.EditContext?.Validate() ?? false;
    public bool IsUpdateFormValid => updateFormRef?.EditContext?.Validate() ?? false;
    public bool IsLineupFormValid => lineupFormRef?.EditContext?.Validate() ?? false;

    private string searchTerm = "";
    private IEnumerable<FestivalGetDto> displayedFestivals => GetFilteredFestivals();


    protected override async Task OnInitializedAsync()
    {
        festivals = await FestivalService.GetAllFestivalsAsync();
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private IEnumerable<FestivalGetDto> GetFilteredFestivals()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            return festivals;
        }

        return festivals.Where(a =>
            a.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        ).OrderBy(a => a.Name);
    }

    private async Task AddFestival()
    {
        await FestivalService.AddFestivalAsync(newFestival);
        newFestival = new FestivalCreateDto();
        festivals = await FestivalService.GetAllFestivalsAsync();
        StateHasChanged();
    }

    private async Task DeleteFestival(int id)
    {
        await FestivalService.DeleteFestivalAsync(id);
        festivals = await FestivalService.GetAllFestivalsAsync();
    }

    @inject IJSRuntime JSRuntime

    @code {
        private async Task PopupDeleteFestival(int id)
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this festival?"))
            {
                await DeleteFestival(id);
            }
        }
    }

    private async Task AddArtistToFestivalLineup()
    {
    try
    {
        if (!newLineup.StartTime.HasValue)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a start time for the performance.");
            return;
        }

        var festStart = festivals.FirstOrDefault(f => f.Id == newLineup.FestivalId)?.StartDate;
        var festEnd = festivals.FirstOrDefault(f => f.Id == newLineup.FestivalId)?.EndDate.AddDays(1);
        var startTime = newLineup.StartTime.Value;
        if(startTime < festStart || startTime > festEnd)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Artist must perform between: {festStart} and {festEnd}");
            return;
        }

            var selectedFestival = festivals.FirstOrDefault(f => f.Id == newLineup.FestivalId);
            var selectedArtist = artists.FirstOrDefault(a => a.Id == newLineup.ArtistId);
            
            if (selectedFestival == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please select a valid festival.");
                return;
            }
            
            if (selectedArtist == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please select a valid artist.");
                return;
            }

            if (string.IsNullOrWhiteSpace(newLineup.Stage))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please enter a stage name.");
                return;
            }

            await FestivalService.AddArtistToFestivalLineupAsync(
                newLineup.FestivalId, 
                newLineup.ArtistId, 
                newLineup.Stage, 
                startTime);

            newLineup = new LineupCreateDto();
            StateHasChanged();
        }
        catch (Exception ex)
        {        
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    
    private void ManageFestivals()
    {
        Navigation.NavigateTo("/festivals-management");
    }

    private async Task OnFestivalSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int festivalId) && festivalId > 0)
        {
            selectedFestivalId = festivalId;
            var selectedFestival = await FestivalService.GetFestivalByIdAsync(festivalId);

            if (selectedFestival != null)
            {
                updatedFestival.Name = selectedFestival.Name;
                updatedFestival.StartDate = selectedFestival.StartDate;
                updatedFestival.EndDate = selectedFestival.EndDate;
                updatedFestival.Address = selectedFestival.Address;
                updatedFestival.Latitude = selectedFestival.Latitude;
                updatedFestival.Longitude = selectedFestival.Longitude;
                updatedFestival.SplashArt = selectedFestival.SplashArt;
                updatedFestival.Capacity = selectedFestival.Capacity;
                StateHasChanged();
            }
        }
        else
        {
            selectedFestivalId = 0;
            updatedFestival = new FestivalUpdateDto();
            StateHasChanged();
        }
    }

    private async Task UpdateFestival()
    {
        if (selectedFestivalId > 0)
        {
            await FestivalService.UpdateFestivalAsync(updatedFestival, selectedFestivalId);
            updatedFestival = new FestivalUpdateDto();
            selectedFestivalId = 0;
            festivals = await FestivalService.GetAllFestivalsAsync();
            StateHasChanged();
        }
    }

    private void ViewFestivalDetails(int festivalId)
    {
        Navigation.NavigateTo($"/festival-details/{festivalId}");
    }

    private void OnFieldChanged()
    {
        addFormRef?.EditContext?.Validate();
        StateHasChanged();
    }

    private void OnUpdateFieldChanged()
    {
        updateFormRef?.EditContext?.Validate();
        StateHasChanged();
    }

    private void OnLineupFieldChanged()
    {
        lineupFormRef?.EditContext?.Validate();
        StateHasChanged();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }
}