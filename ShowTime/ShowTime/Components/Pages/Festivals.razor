@page "/Festivals"
@using ShowTime.BusinessLogic.Abstraction
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models
@inject IFestivalService FestivalService
@inject IArtistService ArtistService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow-x: hidden;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .festivals-container {
        min-height: 100vh;
        width: 100%;
        padding: 0;
        margin: 0;
        position: relative;
        background-attachment: fixed;
        background-repeat: repeat;
        background-size: cover;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/background.jpg') center/cover;
    }

    .content-wrapper {
        padding: 20px 20px 20px 20px;
        width: 100%;
        height: 100%;
    }

    .form-section {
        color: antiquewhite;
        background: linear-gradient(135deg, rgba(0,0,0,0.8), rgba(255,255,255,0.1));
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }

        .form-section h3 {
            color: #91C8E4;
            margin-bottom: 20px;
            font-weight: 600;
            text-shadow: 1px 1px 2px rgba(255,255,255,0.5);
        }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: white;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 8px;
        background: rgba(255,255,255,0.8);
        transition: all 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: #3498db;
            background: rgba(255,255,255,0.95);
            box-shadow: 0 0 0 3px rgba(52,152,219,0.1);
        }

    .btn-custom {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(52,152,219,0.3);
        margin-right: 10px;
    }

        .btn-custom:hover {
            background: linear-gradient(135deg, #2980b9, #1abc9c);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(52,152,219,0.4);
        }

        .btn-custom:disabled {
            background: linear-gradient(135deg, #bdc3c7, #95a5a6);
            cursor: not-allowed;
            transform: none;
        }

    .btn-delete {
        background: linear-gradient(135deg, #2D4F2B, #708A58);
        border-radius: 12px;
    }

        .btn-delete:hover {
            background: linear-gradient(135deg, #708A58, #FFB823);
        }

    .btn-manage {
        background: linear-gradient(135deg, #8e44ad, #9b59b6);
        border-radius: 8px;
        margin-bottom: 20px;
    }

        .btn-manage:hover {
            background: linear-gradient(135deg, #9b59b6, orange);
        }

    .btn-view {
        background: linear-gradient(90deg,rgba(42, 123, 155, 1) 0%, rgba(87, 199, 133, 1) 50%, rgba(237, 221, 83, 1) 100%);
        border-radius: 12px;
    }

        .btn-view:hover {
            background: linear-gradient(135deg, #8e44ad, #e74c3c);
        }

    .festivals-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 25px;
        margin-top: 20px;
    }

    .festival-card {
        background: linear-gradient(50deg, black, #06402B);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        border: 1px solid rgba(255,255,255,0.3);
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
        min-height: 350px;
        text-align: center;
    }

        .festival-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #3498db, #1abc9c, #3498db);
            background-size: 200% 100%;
            animation: shimmer 2s infinite;
        }

        .festival-card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0,0,0,0.25);
        }

    .fest-image {
        width: 250px;
        height: 160px;
        object-fit: cover;
        border-radius: 15px;
        flex-shrink: 0;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }

        .fest-image:hover {
            transform: scale(1.05);
        }

    .festival-name {
        font-size: 1.4em;
        font-weight: 600;
        color: white;
        margin-bottom: 8px;
    }

    .no-festivals {
        text-align: center;
        color: #ecf0f1;
        font-size: 1.3em;
        background: rgba(0,0,0,0.3);
        padding: 40px;
        border-radius: 15px;
        backdrop-filter: blur(5px);
    }

    .page-title {
        text-align: center;
        color: #0F4D0F;
        font-size: 2.5em;
        margin-top: 0;
        margin-bottom: 40px;
        text-shadow: 1px 1px 1px white;
        position: relative;
        z-index: 10;
    }

    .forms-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .fest-name {
        font-style: italic;
        font-weight: bold;
        font-size: 1.8em;
        text-shadow: 1px 1px 2px rgba(0,255,0,0.5);
    }

    .validation-message {
        color: red;
        font-size: 0.875em;
        margin-top: 5px;
        display: block;
        font-weight: 500;
    }

    .form-control:invalid {
        border-color: red;
        box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.1);
    }

    .form-control:valid:not(:placeholder-shown) {
        border-color: darkgreen;
        box-shadow: 0 0 0 3px rgba(39, 174, 96, 0.1);
    }

    .required::after {
        content: " *";
        color: red;
        font-weight: bold;
    }

    .lineup-section {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 2px solid rgba(255,255,255,0.2);
    }

    .button-group {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
        margin-top: 15px;
    }

    @@keyframes shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }
</style>

<div class="festivals-container">
    <div class="content-wrapper">

        <AuthorizeView Roles="Admin">
            <Authorized Context="authContext">
                <button type="button" class="btn-custom btn-manage" @onclick="ManageFestivals">
                    Manage Festivals
                </button>
            </Authorized>
        </AuthorizeView>

        <div class="form-section">
            <h3>Festivals</h3>
            @if (festivals.Count == 0)
            {
                <div class="no-festivals">
                    <p>No festivals so far.</p>
                </div>
            }
            else
            {
                <div class="festivals-grid">
                    @foreach (var fest in festivals)
                    {
                        <div class="festival-card">
                            <img src="@fest.SplashArt" alt="@fest.Name" class="fest-image" />
                            <div class="fest-name">@fest.Name</div>
                            <div class="fest-start">
                                <i class="bi bi-calendar"></i>
                                @fest.StartDate.ToString("dd-MM-yyyy") - @fest.EndDate.ToString("dd-MM-yyyy")
                            </div>
                            <div class="fest-location">
                                <i class="bi bi-geo"></i>
                                @fest.Address
                            </div>
                            @* <div class="fest-price">
                                <i class="bi bi-currency-exchange"></i>
                                from $
                            </div> *@

                            <div class="button-group">
                                <button type="button" class="btn-custom btn-view" @onclick="() => ViewFestivalDetails(fest.Id)">
                                     <i class="bi bi-eye"></i>
                                     View Details
                                </button>
                                <AuthorizeView Roles="Admin">
                                    <Authorized>
                                        <button type="button" class="btn-custom btn-delete" onclick="window.location.href='tickets-management'">
                                            <i class="bi bi-ticket-detailed-fill"></i>
                                            Tickets
                                        </button>
                                    </Authorized>
                                </AuthorizeView>
                                <AuthorizeView Roles="Admin">
                                    <Authorized>
                                        <button type="button" class="btn-custom btn-delete" @onclick="() => PopupDeleteFestival(fest.Id)">
                                            Delete Festival
                                        </button>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IList<FestivalGetDto> festivals = new List<FestivalGetDto>();
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();

    [SupplyParameterFromForm]
    private FestivalCreateDto newFestival { get; set; } = new FestivalCreateDto();

    [SupplyParameterFromForm]
    private FestivalUpdateDto updatedFestival { get; set; } = new FestivalUpdateDto();

    [SupplyParameterFromForm]
    private LineupCreateDto newLineup { get; set; } = new LineupCreateDto();

    private int selectedFestivalId = 0;
    private EditForm? addFormRef;
    private EditForm? updateFormRef;
    private EditForm? lineupFormRef;

    public bool IsAddFormValid => addFormRef?.EditContext?.Validate() ?? false;
    public bool IsUpdateFormValid => updateFormRef?.EditContext?.Validate() ?? false;
    public bool IsLineupFormValid => lineupFormRef?.EditContext?.Validate() ?? false;

    protected override async Task OnInitializedAsync()
    {
        festivals = await FestivalService.GetAllFestivalsAsync();
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task AddFestival()
    {
        await FestivalService.AddFestivalAsync(newFestival);
        newFestival = new FestivalCreateDto();
        festivals = await FestivalService.GetAllFestivalsAsync();
        StateHasChanged();
    }

    private async Task DeleteFestival(int id)
    {
        await FestivalService.DeleteFestivalAsync(id);
        festivals = await FestivalService.GetAllFestivalsAsync();
    }

    @inject IJSRuntime JSRuntime

    @code {
        private async Task PopupDeleteFestival(int id)
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this festival?"))
            {
                await DeleteFestival(id);
            }
        }
    }

    private async Task AddArtistToFestivalLineup()
    {
    try
    {
        if (!newLineup.StartTime.HasValue)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a start time for the performance.");
            return;
        }

        var festStart = festivals.FirstOrDefault(f => f.Id == newLineup.FestivalId)?.StartDate;
        var festEnd = festivals.FirstOrDefault(f => f.Id == newLineup.FestivalId)?.EndDate.AddDays(1);
        var startTime = newLineup.StartTime.Value;
        if(startTime < festStart || startTime > festEnd)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Artist must perform between: {festStart} and {festEnd}");
            return;
        }

            var selectedFestival = festivals.FirstOrDefault(f => f.Id == newLineup.FestivalId);
            var selectedArtist = artists.FirstOrDefault(a => a.Id == newLineup.ArtistId);
            
            if (selectedFestival == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please select a valid festival.");
                return;
            }
            
            if (selectedArtist == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please select a valid artist.");
                return;
            }

            if (string.IsNullOrWhiteSpace(newLineup.Stage))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please enter a stage name.");
                return;
            }

            await FestivalService.AddArtistToFestivalLineupAsync(
                newLineup.FestivalId, 
                newLineup.ArtistId, 
                newLineup.Stage, 
                startTime);

            newLineup = new LineupCreateDto();
            StateHasChanged();
        }
        catch (Exception ex)
        {        
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    
    private void ManageFestivals()
    {
        Navigation.NavigateTo("/festivals-management");
    }

    private async Task OnFestivalSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int festivalId) && festivalId > 0)
        {
            selectedFestivalId = festivalId;
            var selectedFestival = await FestivalService.GetFestivalByIdAsync(festivalId);

            if (selectedFestival != null)
            {
                updatedFestival.Name = selectedFestival.Name;
                updatedFestival.StartDate = selectedFestival.StartDate;
                updatedFestival.EndDate = selectedFestival.EndDate;
                updatedFestival.Address = selectedFestival.Address;
                updatedFestival.Latitude = selectedFestival.Latitude;
                updatedFestival.Longitude = selectedFestival.Longitude;
                updatedFestival.SplashArt = selectedFestival.SplashArt;
                updatedFestival.Capacity = selectedFestival.Capacity;
                StateHasChanged();
            }
        }
        else
        {
            selectedFestivalId = 0;
            updatedFestival = new FestivalUpdateDto();
            StateHasChanged();
        }
    }

    private async Task UpdateFestival()
    {
        if (selectedFestivalId > 0)
        {
            await FestivalService.UpdateFestivalAsync(updatedFestival, selectedFestivalId);
            updatedFestival = new FestivalUpdateDto();
            selectedFestivalId = 0;
            festivals = await FestivalService.GetAllFestivalsAsync();
            StateHasChanged();
        }
    }

    private void ViewFestivalDetails(int festivalId)
    {
        Navigation.NavigateTo($"/festival-details/{festivalId}");
    }

    private void OnFieldChanged()
    {
        addFormRef?.EditContext?.Validate();
        StateHasChanged();
    }

    private void OnUpdateFieldChanged()
    {
        updateFormRef?.EditContext?.Validate();
        StateHasChanged();
    }

    private void OnLineupFieldChanged()
    {
        lineupFormRef?.EditContext?.Validate();
        StateHasChanged();
    }
}