@page "/login"
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using ShowTime.BusinessLogic.Abstraction
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess
@using ShowTime.DataAccess.Models
@using System.Security.Claims
@using ShowTime.DataAccess.Models.Enums
@using Microsoft.AspNetCore.Authentication
@using BCrypt.Net
@inject IUserService UserService
@inject NavigationManager navigationManager
@inject ShowTimeDbContext appDbContext

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body, html {
        height: 100%;
        background: linear-gradient(135deg, rgba(0,0,0,0.7), rgba(0,0,0,0.4)), url('/images/bckg1.jpg') center/cover;
        background-attachment: fixed;
    }

    .wrapper {
        height: 100vh;
        width: 100vw;
        overflow: auto;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .login-container {
        max-height: 100%;
        max-width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .login-card {
        background: linear-gradient(135deg, rgb(53, 94, 59), rgb(2, 48, 32), rgb(9, 121, 105));
        backdrop-filter: blur(10px);
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        border: 1px solid rgba(255,255,255,0.2);
        width: 100%;
        max-width: 500px;
        overflow: hidden;
        animation: fadeInUp 0.6s ease-out;
    }

    .card-body {
        padding: 20px;
    }

    .card-footer {
        background: silver;
        padding: 20px;
        text-align: center;
        border-radius: 0 0 25px 25px;
    }

    .error-message {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
        padding: 12px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        color: white;
        font-weight: 500;
    }

    .form-input {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid rgba(0,0,0,0.1);
        border-radius: 8px;
        background: rgba(255,255,255,0.9);
        transition: all 0.3s ease;
        font-size: 1rem;
    }

        .form-input:focus {
            outline: none;
            border-color: #3498db;
            background: rgba(255,255,255,1);
            box-shadow: 0 0 0 3px rgba(52,152,219,0.1);
        }

        .form-input::placeholder {
            color: #6c757d;
            opacity: 0.7;
        }

    .validation-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 5px;
        display: block;
        font-weight: 500;
    }

    /* Layered Button Styles */
    .login-btn-container {
        position: relative;
        width: 40%;
        height: 56px;
        margin: 10px auto 0;
    }

    .login-btn-stack {
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease;
        width: 100%;
        height: 100%;
        border: none;
        background: transparent;
        padding: 0;
    }

        .login-btn-stack:hover:not(:disabled) {
            transform: translateY(-2px);
        }

        .login-btn-stack:active:not(:disabled) {
            transform: translateY(0px);
        }

        .login-btn-stack:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

    .login-btn-layer {
        position: absolute;
        width: 100%;
        height: 48px;
        /* border-radius: 8px; */
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        font-size: 1rem;
        border: none;
        transition: all 0.2s ease;
        pointer-events: none;
    }

    .login-layer-bottom {
        background: #104F55;
        top: 6px;
        left: 6px;
        z-index: 1;
    }

    .login-layer-middle {
        background: #9EC5AB;
        top: 3px;
        left: 3px;
        z-index: 2;
    }

    .login-layer-top {
        background: #01200F;
        color: white;
        top: 0;
        left: 0;
        z-index: 3;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .login-btn-stack:hover:not(:disabled) .login-layer-top {
        transform: translate(-1px, -1px);
    }

    .login-btn-stack:hover:not(:disabled) .login-layer-middle {
        transform: translate(-1px, -1px);
    }

    .login-btn-stack:active:not(:disabled) .login-layer-top {
        transform: translate(2px, 2px);
    }

    .login-btn-stack:active:not(:disabled) .login-layer-middle {
        transform: translate(1px, 1px);
    }

    .login-btn-stack:disabled .login-layer-top {
        background: #6c757d;
        color: #adb5bd;
    }

    .login-btn-stack:disabled .login-layer-middle {
        background: #95a5a6;
    }

    .login-btn-stack:disabled .login-layer-bottom {
        background: #5a6268;
    }

    .register-link {
        margin: 0;
        color: #666;
        font-size: 0.95rem;
    }

        .register-link a {
            color: #0F4D0F;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

            .register-link a:hover {
                color: #2980b9;
                text-decoration: underline;
            }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<div class="login-container">
    <div class="login-card">
        <div class="card-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    @errorMessage
                </div>
            }

            <EditForm Model="loginInfo" OnValidSubmit="Authenticate" FormName="LoginForm">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" class="form-input" @bind-Value="loginInfo.Email" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => loginInfo.Email)" class="validation-error" />
                </div>

                <div class="form-group">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" type="password" class="form-input" @bind-Value="loginInfo.Password" placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginInfo.Password)" class="validation-error" />
                </div>

                <div class="login-btn-container">
                    <button type="submit" class="login-btn-stack">
                        <div class="login-btn-layer login-layer-bottom"></div>
                        <div class="login-btn-layer login-layer-middle"></div>
                        <div class="login-btn-layer login-layer-top">
                            <span>Login</span>
                        </div>
                    </button>
                </div>

            </EditForm>
        </div>
        <div class="card-footer">
            <p class="register-link">Don't have an account? <a href="/register">Register here</a></p>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginDto loginInfo { get; set; } = new LoginDto();

    [CascadingParameter]
    private HttpContext httpContext { get; set; } = null!;

    private string? errorMessage;
    private bool isProcessing = false;

    private async Task Authenticate()
    {
        try
        {
            isProcessing = true;
            errorMessage = null;
            StateHasChanged();

            if (string.IsNullOrWhiteSpace(loginInfo.Email))
            {
                errorMessage = "Email is required.";
                return;
            }

            if (string.IsNullOrWhiteSpace(loginInfo.Password))
            {
                errorMessage = "Password is required.";
                return;
            }

            var loginResult = await UserService.LoginAsync(loginInfo);

            if (loginResult == null)
            {
                errorMessage = "Invalid email or password.";
                return;
            }

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.NameIdentifier, loginResult.UserId.ToString()),
                new Claim(ClaimTypes.Email, loginResult.Email ?? ""),
                new Claim(ClaimTypes.Name, loginResult.Username ?? ""),
                new Claim(ClaimTypes.Role, Enum.GetName(typeof(Role), loginResult.Role) ?? nameof(Role.User))
            };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);

            await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);

            httpContext.Response.Redirect("/festivals");
        }
        catch (Exception ex)
        {
            errorMessage = $"Login error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}